//! ÂÆö‰πâÊäΩË±°ÁöÑ„ÄåËØçÈ°πÁ±ªÂà´„ÄçAPI
//! * üéØÁî®‰∫éÂú®„ÄåÂÆπÁ∫≥ÊÄß„ÄçÔºàÂèØÂåÖÂê´ÁöÑËØçÈ°πÊï∞ÁõÆÔºâÂØπËØçÈ°πÂø´ÈÄüÂΩíÁ±ª
//! * üö©„Äê2024-03-29 21:26:50„ÄëËá™„ÄåÊûö‰∏æNarsese„ÄçÁã¨Á´ãËÄåÊù•

/// ËØçÈ°πÂÆπÈáè
/// * üéØÂú®„ÄåÂÆπÁ∫≥ÊÄß„ÄçÔºàÂèØÂåÖÂê´ÁöÑËØçÈ°πÊï∞ÁõÆÔºâ‰∏äÂØπËØçÈ°πÂø´ÈÄüÂàÜÁ±ª
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum TermCapacity {
    /// ÂéüÂ≠ê
    Atom,
    /// ‰∏ÄÂÖÉ
    Unary,
    /// ‰∫åÂÖÉÂ∫èÂàó
    BinaryVec,
    /// ‰∫åÂÖÉÈõÜÂêà
    BinarySet,
    /// ÔºàÂ§öÂÖÉÔºâÂ∫èÂàó
    Vec,
    /// ÔºàÂ§öÂÖÉÔºâÈõÜÂêà
    Set,
}
// Ê®°ÂùóÂÜÖÂØºÂá∫‰ª•‰æøÂø´Êç∑‰ΩøÁî®
use TermCapacity::*;

/// ÂÆûÁé∞/Âü∫Á°ÄÂäüËÉΩ
impl TermCapacity {
    /// Ëé∑ÂèñËøô‰∫õ„ÄåÂÆπÈáè„ÄçÊûö‰∏æÁöÑ„ÄåÂü∫Êï∞„Äç
    /// * üö©ÂéüÂ≠ê = ‰∏ÄÂÖÉ = 1
    /// * üö©‰∫åÂÖÉÂ∫èÂàó = ‰∫åÂÖÉÈõÜÂêà = 2
    /// * üö©ÔºàÂ§öÂÖÉÔºâÂ∫èÂàó = ÔºàÂ§öÂÖÉÔºâÈõÜÂêà = 3
    pub fn base_num(&self) -> usize {
        match self {
            Atom | Unary => 1,
            BinaryVec | BinarySet => 2,
            Vec | Set => 3,
        }
    }
}

/// ÂÆûÁé∞/ÂÅèÂ∫èÂÖ≥Á≥ª | ÈÄöËøá„ÄåÂü∫Êï∞„ÄçÊØîËæÉ
/// * üö©Âü∫‰∫é[`Ord::cmp`]ÂÆûÁé∞[`PartialOrd::partial_cmp`]
impl PartialOrd for TermCapacity {
    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {
        Some(self.cmp(other))
    }
}
/// ÂÆûÁé∞/ÂÖ®Â∫èÂÖ≥Á≥ª | ÈÄöËøá„ÄåÂü∫Êï∞„ÄçÊØîËæÉ
impl Ord for TermCapacity {
    fn cmp(&self, other: &Self) -> std::cmp::Ordering {
        self.base_num().cmp(&other.base_num())
    }
}

/// ÁâπÂæÅ„ÄåËé∑ÂèñËØçÈ°πÂÆπÈáè„Äç
/// * ‚ö†Ô∏è‰ªÖËÄÉÂØü„ÄåÊΩúÂú®ÂÆπÈáè„ÄçËÄåÈùû„ÄåÂÆûÈôÖÂÆπÈáè„Äç
///   * üìå‰ªÖËÄÉÂØüËØçÈ°π„ÄåÂèØËÉΩÂÆπÁ∫≥ÁöÑÂ§ßÂ∞è„ÄçÔºå‰∏çËÄÉÂØü„ÄåËØçÈ°πÂÆûÈôÖÂÆπÁ∫≥ÁöÑÂ§öÂ∞ë„Äç
///   * üìÑÂç≥‰æø„ÄåÂè™Ë£Ö‰∫Ü‰∏Ä‰∏™ÂÖÉÁ¥†ÁöÑÂ§ñÂª∂ÈõÜ„Äç‰πüÊòØ„ÄåÔºàÂ§öÂÖÉÔºâÈõÜÂêà„Äç
/// * ‚ö†Ô∏èÂ¶ÇÂÆûÂèçÊò†ËØçÈ°πÂú®**Êï∞ÊçÆÁªìÊûÑ**‰∏äÁöÑÂÆπÁ∫≥Ê®°ÂºèÔºåËÄåÈùû„ÄåËØ≠Ê≥ïÂ±ÇÊ¨°ÁöÑÂÆπÁ∫≥Ê®°Âºè„Äç
///   * üìå‰ªÖËÄÉÂØüËØçÈ°π„ÄåÈÄªËæë‰∏äÂ≠òÂèñÁöÑÊñπÂºè„ÄçÔºå‰∏çËÄÉÂØü„ÄåËØ≠Ê≥ïËß£Êûê‰∏≠‰ΩøÁî®ÁöÑÊñπÂºè„Äç
///   * üìÑÂç≥‰æøËØçÊ≥ïNarseseÈõÜÂêà„ÄåÂ§ßÂ§ö‰ºöË¢´ÊäòÂè†ÊàêÁúüÊ≠£ÁöÑ„ÄéÈõÜÂêà„Äè„ÄçÔºåÂÆÉÂ≠òÂèñ‰∏äÁõ¥Êé•‰ΩøÁî®[`Vec`]ÔºåÈÇ£Â∞±ÊòØ„ÄåÔºàÂ§öÂÖÉÔºâÂ∫èÂàó„Äç
pub trait GetCapacity {
    /// Ëé∑ÂèñËØçÈ°πÁöÑ„ÄåÂÆπÈáè„ÄçÂ±ûÊÄß
    fn get_capacity(&self) -> TermCapacity;

    /// Âú®ÂÆπÈáè‰∏äÊòØÂê¶‰∏∫„ÄåÂéüÂ≠ê„Äç
    #[inline]
    fn is_capacity_atom(&self) -> bool {
        self.get_capacity() == Atom
    }

    /// Âú®ÂÆπÈáè‰∏äÊòØÂê¶‰∏∫„Äå‰∏ÄÂÖÉÂ§çÂêà„Äç
    #[inline]
    fn is_capacity_unary(&self) -> bool {
        self.get_capacity() == Unary
    }

    /// Âú®ÂÆπÈáè‰∏äÊòØÂê¶‰∏∫„Äå‰∫åÂÖÉÂ∫èÂàó„Äç
    #[inline]
    fn is_capacity_binary_vec(&self) -> bool {
        self.get_capacity() == BinaryVec
    }

    /// Âú®ÂÆπÈáè‰∏äÊòØÂê¶‰∏∫„Äå‰∫åÂÖÉÈõÜÂêà„Äç
    #[inline]
    fn is_capacity_binary_set(&self) -> bool {
        self.get_capacity() == BinarySet
    }

    /// Âú®ÂÆπÈáè‰∏äÊòØÂê¶‰∏∫„ÄåÔºàÂ§öÂÖÉÔºâÂ∫èÂàó„Äç
    #[inline]
    fn is_capacity_vec(&self) -> bool {
        self.get_capacity() == Vec
    }

    /// Âú®ÂÆπÈáè‰∏äÊòØÂê¶‰∏∫„ÄåÔºàÂ§öÂÖÉÔºâÈõÜÂêà„Äç
    #[inline]
    fn is_capacity_set(&self) -> bool {
        self.get_capacity() == Set
    }
}

/// ÂçïÂÖÉÊµãËØï
#[cfg(test)]
mod test {
    use super::*;
    use util::asserts;

    /// ÊµãËØï/ÂÖ®Â∫èÂÖ≥Á≥ª
    /// * ‰ªÖ‰ªÖÊòØÂ§ß‰Ωì‰∏äÁöÑÂÖ≥Á≥ªÔºåÂπ∂‰∏çËÉΩÊ†πÊçÆ„ÄåÂ§ßÂ∞è„ÄçÈîÅÂÆö
    #[test]
    fn test_ord() {
        // Âü∫Êï∞
        asserts! {
            Atom.base_num() => 1
            Unary.base_num() => 1
            BinarySet.base_num() => 2
            BinaryVec.base_num() => 2
            Set.base_num() => 3
            Vec.base_num() => 3
        }
        // Â§ßÂ∞è
        asserts! {
            Atom == Unary // 1 = 1
            Unary < BinarySet // 1 < 2
            BinarySet == BinaryVec // 2 = 2
            BinaryVec < Set // 2 < 3
            Set == Vec // 3 = 3
        }
    }
}
